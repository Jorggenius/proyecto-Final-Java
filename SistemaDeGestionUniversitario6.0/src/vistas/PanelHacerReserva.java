/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ControlPanelHacerReserva;
import excepciones.NoTieneReserva;
import excepciones.ReservaActiva;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Estudiante;
import modelo.Horario;
import modelo.Laboratorio;
import modelo.Puesto;
import modelo.Reserva;

/**
 *
 * @author JORGE
 */
public class PanelHacerReserva extends javax.swing.JFrame {

    ControlPanelHacerReserva controlPHR;
    Estudiante estudiante;

    /**
     * Creates new form HacerReserva
     */
    public PanelHacerReserva(Estudiante estudiante) {
        initComponents();
        setLocationRelativeTo(this);
        this.estudiante = estudiante;
        controlPHR = new ControlPanelHacerReserva();
        llenarComboBoxLab();
        cbLabs.setSelectedItem(null);
        cbLabs.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLabsActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegresar = new javax.swing.JButton();
        dateReserva = new com.toedter.calendar.JDateChooser();
        lblFechaReserva = new javax.swing.JLabel();
        cbLabs = new javax.swing.JComboBox<>();
        lblLaboratorios = new javax.swing.JLabel();
        lblTtulo = new javax.swing.JLabel();
        txtHoraInicio = new javax.swing.JTextField();
        txtHoraFinal = new javax.swing.JTextField();
        lblHoraInicio = new javax.swing.JLabel();
        lblHoraFinal = new javax.swing.JLabel();
        btnInformacionReserva = new javax.swing.JButton();
        btnCacelarReserva = new javax.swing.JButton();
        lblPuestos = new javax.swing.JLabel();
        cbPuestos = new javax.swing.JComboBox<>();
        btnHacerReserva = new javax.swing.JButton();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 351, -1, -1));
        getContentPane().add(dateReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 100, -1));

        lblFechaReserva.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFechaReserva.setText("Fecha:");
        getContentPane().add(lblFechaReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 90, -1, -1));

        getContentPane().add(cbLabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 128, 100, -1));

        lblLaboratorios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblLaboratorios.setText("Labs:");
        getContentPane().add(lblLaboratorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 128, -1, -1));

        lblTtulo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTtulo.setText("Hacer reservas");
        getContentPane().add(lblTtulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 132, -1));
        getContentPane().add(txtHoraInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, 100, -1));
        getContentPane().add(txtHoraFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 100, -1));

        lblHoraInicio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblHoraInicio.setText("Hora inicio:");
        getContentPane().add(lblHoraInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, -1, -1));

        lblHoraFinal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblHoraFinal.setText("Hora final:");
        getContentPane().add(lblHoraFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, -1, -1));

        btnInformacionReserva.setText("Informacion de la reserva");
        btnInformacionReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformacionReservaActionPerformed(evt);
            }
        });
        getContentPane().add(btnInformacionReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 330, 200, -1));

        btnCacelarReserva.setText("Cancelar reserva");
        btnCacelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCacelarReservaActionPerformed(evt);
            }
        });
        getContentPane().add(btnCacelarReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, 120, -1));

        lblPuestos.setText("Puestos");
        getContentPane().add(lblPuestos, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        getContentPane().add(cbPuestos, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 100, -1));

        btnHacerReserva.setText("Generar reserva");
        btnHacerReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHacerReservaActionPerformed(evt);
            }
        });
        getContentPane().add(btnHacerReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 120, -1));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Fondo.png"))); // NOI18N
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 500, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        VentanaUsEstudiante ventanaUE = new VentanaUsEstudiante(estudiante);
        ventanaUE.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnHacerReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHacerReservaActionPerformed
        // TODO add your handling code here:
        try {
            // Verificar si la fecha de reserva está seleccionada
            if (dateReserva.getDate() == null) {
                throw new IllegalArgumentException("Debe seleccionar una fecha de reserva.");
            }

            LocalDate fechaReserva = dateReserva.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            System.out.println("fecha " + fechaReserva);

            // Verificar si se ha seleccionado un laboratorio
            if (cbLabs.getSelectedItem() == null) {
                throw new IllegalArgumentException("Debe seleccionar un laboratorio.");
            }

            int idLaboratorio;
            try {
                idLaboratorio = Integer.parseInt(String.valueOf(cbLabs.getSelectedItem()));
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("El ID del laboratorio seleccionado no es válido.");
            }
            int idPuesto;
            try {
                idPuesto = Integer.parseInt(String.valueOf(cbPuestos.getSelectedItem()));
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("El ID del laboratorio seleccionado no es válido.");
            }

            // Verificar si los campos de hora de inicio y fin no están vacíos
            if (txtHoraInicio.getText().isEmpty() || txtHoraFinal.getText().isEmpty()) {
                throw new IllegalArgumentException("Debe ingresar las horas de inicio y fin.");
            }

            LocalTime horaInicio;
            LocalTime horaFinal;
            try {
                horaInicio = LocalTime.parse(txtHoraInicio.getText());
                horaFinal = LocalTime.parse(txtHoraFinal.getText());
            } catch (DateTimeParseException ex) {
                throw new IllegalArgumentException("El formato de hora debe ser HH:mm.");
            }
            Duration duration = Duration.between(horaInicio, horaFinal);
            // Crear una instancia de Reserva
            Reserva reserva = new Reserva(fechaReserva, idLaboratorio, horaInicio, horaFinal, estudiante);

            // Generar la reserva
            if (controlPHR.validarReserva(reserva)) {
                if (duration.toMinutes() < 61) {
                    controlPHR.generarReserva(idLaboratorio, reserva, estudiante.getId(), idPuesto);
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(null, "EL tiempo no puede exeder una hora");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El puesto no esta disponible\n para la fecha");
            }
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            limpiarCampos();
        } catch (ReservaActiva ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            limpiarCampos();
        }

//        try {
//            LocalDate fechaReserva = dateReserva.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//            System.out.println("fecha " + fechaReserva);
//            int idLaboratorio = Integer.parseInt(String.valueOf(cbLabs.getSelectedItem()));
//
//            LocalTime horaInicio = LocalTime.parse(txtHoraInicio.getText());
//            LocalTime horaFinal = LocalTime.parse(txtHoraFinal.getText());
//
//            Reserva reserva = new Reserva(fechaReserva, idLaboratorio, horaInicio, horaFinal);
//
//            controlPHR.generarReserva(idLaboratorio, reserva, estudiante.getId());
//            limpiarCampos();
//        } catch (ReservaActiva ex) {
//            JOptionPane.showMessageDialog(null, ex.getMessage());
//            limpiarCampos();
//        }
    }//GEN-LAST:event_btnHacerReservaActionPerformed

    private void btnCacelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCacelarReservaActionPerformed
        // TODO add your handling code here:
        try {
            controlPHR.cancelarReserva(estudiante);

        } catch (NoTieneReserva ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }//GEN-LAST:event_btnCacelarReservaActionPerformed

    private void btnInformacionReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformacionReservaActionPerformed
        // TODO add your handling code here:

        if (estudiante.isTieneReserva()) {
            JOptionPane.showMessageDialog(null, " Informacion de la reserva \n\n"
                    + " Estudiante: " + estudiante.getNombre()
                    + "\n Programa: " + estudiante.getPrograma()
                    + "\n Fecha: " + estudiante.getReserva().getDiaReserva()
                    + "\n Id laboratorio: " + estudiante.getReserva().getIdLab()
                    + "\n Hora inicio: " + estudiante.getReserva().getHoraInicio()
                    + "\n Hora final: " + estudiante.getReserva().getHoraFinal());
        } else {
            JOptionPane.showMessageDialog(null, "No hay reserva");
        }
    }//GEN-LAST:event_btnInformacionReservaActionPerformed

    private void cbLabsActionPerformed(java.awt.event.ActionEvent evt) {
        if (cbLabs.getSelectedItem() != null) {
            int idLaboratorio = Integer.parseInt(String.valueOf(cbLabs.getSelectedIndex()));
            llenarComboBoxPuestos(idLaboratorio);
        }
    }

    public void llenarComboBoxLab() {
        ArrayList<Laboratorio> labs = controlPHR.getLabs();
        DefaultComboBoxModel<String> modeloLabs = new DefaultComboBoxModel<>();
        for (Laboratorio lab : labs) {
            modeloLabs.addElement(String.valueOf(lab.getIdLaboratorio()));
        }
        cbLabs.setModel(modeloLabs);
    }

    public void llenarComboBoxPuestos(int idLaboratorio) {
        DefaultComboBoxModel<String> modelPuesto = new DefaultComboBoxModel<>();
        for (Puesto puesto : controlPHR.getLabs().get(idLaboratorio).getPuestos()) {
            modelPuesto.addElement(String.valueOf(puesto.getIdPuesto()));
        }
        cbPuestos.setModel(modelPuesto);
    }

    public void limpiarCampos() {
        dateReserva.setDate(null);
        cbLabs.setSelectedItem(null);
        txtHoraInicio.setText("");
        txtHoraFinal.setText("");
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCacelarReserva;
    private javax.swing.JButton btnHacerReserva;
    private javax.swing.JButton btnInformacionReserva;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cbLabs;
    private javax.swing.JComboBox<String> cbPuestos;
    private com.toedter.calendar.JDateChooser dateReserva;
    private javax.swing.JLabel lblFechaReserva;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblHoraFinal;
    private javax.swing.JLabel lblHoraInicio;
    private javax.swing.JLabel lblLaboratorios;
    private javax.swing.JLabel lblPuestos;
    private javax.swing.JLabel lblTtulo;
    private javax.swing.JTextField txtHoraFinal;
    private javax.swing.JTextField txtHoraInicio;
    // End of variables declaration//GEN-END:variables
}
